name: Create Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  check-version:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip release]')"
    outputs:
      version: ${{ steps.package_version.outputs.version }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Get package version
      id: package_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.package_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

  build:
    runs-on: ${{ matrix.runner }}
    needs: check-version
    if: needs.check-version.outputs.tag_exists == 'false'
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: ubuntu-24.04-arm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Build and push production Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/${{ matrix.platform }}
        push: true
        tags: |
          ghcr.io/${{ github.actor }}/matchexec:v${{ needs.check-version.outputs.version }}-${{ matrix.platform }}
          ghcr.io/${{ github.actor }}/matchexec:latest-${{ matrix.platform }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: needs.check-version.outputs.tag_exists == 'false'
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Create and push manifest
      run: |
        docker buildx imagetools create -t ghcr.io/${{ github.actor }}/matchexec:v${{ needs.check-version.outputs.version }} \
          ghcr.io/${{ github.actor }}/matchexec:v${{ needs.check-version.outputs.version }}-amd64 \
          ghcr.io/${{ github.actor }}/matchexec:v${{ needs.check-version.outputs.version }}-arm64
        docker buildx imagetools create -t ghcr.io/${{ github.actor }}/matchexec:latest \
          ghcr.io/${{ github.actor }}/matchexec:latest-amd64 \
          ghcr.io/${{ github.actor }}/matchexec:latest-arm64
          
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ needs.check-version.outputs.version }}" \
          --title "Release v${{ needs.check-version.outputs.version }}" \
          --notes "## üêõ Bug Fixes

        ## ‚ú® New Features

        ## üéÆ Game Data
        
        **Docker Image:** \`ghcr.io/${{ github.actor }}/matchexec:v${{ needs.check-version.outputs.version }}\`" \
          --draft