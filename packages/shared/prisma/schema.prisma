// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Game {
  id          String   @id
  name        String   @unique
  displayName String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  players       Player[]
  matches       Match[]
  characters    Character[]
  maps          Map[]
  gameModes     GameMode[]
  playerStats   PlayerStats[]
  jobQueue      JobQueue[]

  @@map("games")
}

model Player {
  id          String   @id @default(cuid())
  gameId      String
  username    String
  displayName String?
  userId      String?  // Discord user ID
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game         Game           @relation(fields: [gameId], references: [id], onDelete: Cascade)
  playerStats  PlayerStats[]
  matchResults MatchResult[]

  @@unique([gameId, username])
  @@map("players")
}

model Character {
  id          String   @id @default(cuid())
  gameId      String
  name        String
  displayName String
  role        String   // Tank, DPS, Support for Overwatch; Vanguard, Duelist, Strategist for Marvel Rivals
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game         Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  matchResults MatchResult[]

  @@unique([gameId, name])
  @@map("characters")
}

model Map {
  id          String   @id @default(cuid())
  gameId      String
  name        String
  displayName String
  mapType     String   // Escort, Assault, Hybrid, Control for Overwatch
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  matches Match[]

  @@unique([gameId, name])
  @@map("maps")
}

model GameMode {
  id          String   @id @default(cuid())
  gameId      String
  name        String
  displayName String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  matches Match[]

  @@unique([gameId, name])
  @@map("game_modes")
}

model Match {
  id          String   @id @default(cuid())
  gameId      String
  mapId       String?
  gameModeId  String?
  matchCode   String?  // Custom match codes if available
  startTime   DateTime
  endTime     DateTime?
  status      String   @default("pending") // pending, active, completed, cancelled
  metadata    String?  // JSON for game-specific match data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game         Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  map          Map?          @relation(fields: [mapId], references: [id])
  gameMode     GameMode?     @relation(fields: [gameModeId], references: [id])
  matchResults MatchResult[]
  playerStats  PlayerStats[]

  @@map("matches")
}

model MatchResult {
  id          String   @id @default(cuid())
  matchId     String
  playerId    String
  characterId String?
  team        String?  // Team1, Team2, etc.
  result      String?  // win, loss, draw
  score       Int?
  placement   Int?     // For individual rankings
  statsJson   String?  // JSON blob for game-specific stats
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  match     Match      @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player    Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  character Character? @relation(fields: [characterId], references: [id])

  @@unique([matchId, playerId])
  @@map("match_results")
}

model PlayerStats {
  id             String   @id @default(cuid())
  gameId         String
  playerId       String
  matchId        String?  // Null for overall stats
  statType       String   // match, daily, weekly, monthly, season, overall
  period         String?  // For time-based stats (e.g., "2024-01", "2024-W01")
  statisticsJson String   // JSON blob for game-specific statistics
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  game   Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  match  Match?  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([gameId, playerId, matchId, statType, period])
  @@map("player_stats")
}

model JobQueue {
  id          String   @id @default(cuid())
  gameId      String?
  jobType     String   // statistics_update, embed_update, ocr_process, etc.
  status      String   @default("pending") // pending, processing, completed, failed
  priority    Int      @default(0)
  payload     String?  // JSON payload for job data
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  error       String?
  scheduledAt DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game Game? @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([status, scheduledAt])
  @@index([jobType, status])
  @@map("job_queue")
} 